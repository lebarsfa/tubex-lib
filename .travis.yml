# ==================================================================
#  Codac - travis test script
# ==================================================================

language: c++

# Should avoid triggering a build when a GitHub release or tag is manually created...
if: tag IS blank

addons:
  apt:
    sources:
    - deadsnakes
    - chef-current-precise

    packages:
    - cmake
    - python3.6
    - libeigen3-dev

# See https://docs.travis-ci.com/user/build-config-yaml#private-keys-as-yaml-anchors-and-aliases-and-external-tooling
_vs_specific: &vs_specific 
    os: windows
    before_install:
    - if [ "${CHOCO_VS_TOOLS}" = "vcbuildtools" ]; then choco install -y vcbuildtools -ia "/InstallSelectableItems Win81SDK_CppBuildSKUV1;VisualCppBuildTools_ATLMFC_SDK" winflexbison ; else choco install -y ${CHOCO_VS_TOOLS} winflexbison ; fi
    - wget https://github.com/ros2/choco-packages/releases/download/2020-02-24/eigen.3.3.4.nupkg --no-check-certificate -nv ; choco install -y eigen.3.3.4.nupkg
    - if [ "${WITH_PYTHON}" = "ON" ]; then if [ "${PY_V_MM}" = "34" ]; then cmd //c "choco install -y doxygen.install graphviz & choco install -y python --version=${PY_V_F} & refreshenv.cmd & set PATH=C:\Python${PY_V_MM};C:\Python${PY_V_MM}\Scripts;%PATH% & python -m pip install --upgrade pip==19.1.1 & pip install --upgrade pyIbex & pip install --upgrade wheel setuptools & refreshenv.cmd" ; else cmd //c "choco install -y doxygen.install graphviz & choco install -y python --version=${PY_V_F} & refreshenv.cmd & set PATH=C:\Python${PY_V_MM};C:\Python${PY_V_MM}\Scripts;%PATH% & python -m pip install --upgrade pip & pip install --upgrade pyIbex & pip install --upgrade wheel setuptools & git clone -b v3.1.1 https://github.com/sphinx-doc/sphinx & cd sphinx & pip install . & pip install --upgrade breathe sphinx-issues sphinx-tabs sphinx_rtd_theme & refreshenv.cmd" ; fi ; export PATH=/c/Python${PY_V_MM}:/c/Python${PY_V_MM}/Scripts:$PATH ; fi
    cache:
    directories: ibex
    install:
    script:
    - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -G "${CMAKE_PARAM_G}" -A ${CMAKE_PARAM_A} -D CMAKE_CXX_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_C_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_INSTALL_PREFIX="../../ibex" -D INTERVAL_LIB=filib .. ; cmake --build . --config Release --target install ; cd ../.. ) else echo "Using cached directory." ; fi
    - mkdir build ; cd build
    - cmake -G "${CMAKE_PARAM_G}" -A ${CMAKE_PARAM_A} -D CMAKE_CXX_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_C_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D WITH_PYTHON=${WITH_PYTHON} ..
    - if [ "${WITH_PYTHON}" = "ON" ]; then cmake --build . --config Debug --target api ; fi
    - if [ "${WITH_PYTHON}" = "ON" ]; then cmake -G "${CMAKE_PARAM_G}" -A ${CMAKE_PARAM_A} -D CMAKE_CXX_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_C_FLAGS=" /D WIN32 /EHsc /D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4305" -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D WITH_PYTHON=${WITH_PYTHON} .. ; fi
    - cmake --build . --config Debug --target install
    - if [ "${WITH_PYTHON}" = "ON" ]; then cmake --build . --config Debug --target pip_package ; cp `ls *.whl` ../`ls *.whl | sed "s/py3-none-any/cp${PY_V_MM}-cp${PY_V_MM}${CPCFG}/"` ; pip install ../*.whl ; python -c "import sys; print(sys.version)" ; python ../examples/tuto/01_getting_started/01_getting_started.py ; fi
    - cd ..
    - if [ "${WITH_CPP_BUNDLE}" = "ON" ]; then wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip --no-check-certificate -nv ; 7z x codac_test_win.zip -y ; rm -Rf codac_test_win.zip ; cd codac_test_win; rm -Rf ibex codac ; cp -Rf ../ibex . ; cp -Rf ../codac .; cd .. ; 7z a -y codac_test_${CFG}.zip codac_test_win ; cd codac_test_win/test ; cmake -G "${CMAKE_PARAM_G}" -A ${CMAKE_PARAM_A} . ; cmake --build . --config Release ; cmd //c "Release\my_project.exe" ; cd ../.. ; fi

matrix:
  include:
    # One environment for python binding:
    - sudo: true
      services:
        - docker
      env: DOCKER_IMAGE=benensta/pyibex-docker
      install:
        - docker pull $DOCKER_IMAGE
      script:
        - chmod a+x scripts/docker/build_pybinding.sh
        - docker run --rm -v `pwd`:/io $DOCKER_IMAGE /io/scripts/docker/build_pybinding.sh
        - ls wheelhouse

    # Other environments for C++ tests (g++ versions, trees..)
# todo  - os: linux
# todo    addons:
# todo      apt:
# todo        sources:
# todo          - ubuntu-toolchain-r-test
# todo        packages:
# todo          - g++-5
# todo    env:
# todo      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
# todo  - os: linux
# todo    addons:
# todo      apt:
# todo        sources:
# todo          - ubuntu-toolchain-r-test
# todo        packages:
# todo          - g++-7
# todo    env:
# todo      - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"

    - name: "Ubuntu 18.04"
      os: linux
      dist: bionic
      compiler: gcc
      before_install: 
        - sudo apt-get -q update || true
        - sudo apt-get -y install flex bison libeigen3-dev || true
      cache:
      install:
      script: 
        - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -D CMAKE_INSTALL_PREFIX="../../ibex" -D CMAKE_CXX_FLAGS="-fPIC" -D CMAKE_C_FLAGS="-fPIC" .. ; cmake --build . --target install ; cd ../.. ) else echo "Using cached directory." ; fi
        - mkdir build ; cd build
        - cmake -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" ..
        - cmake --build . --target install
        - cd ..
        # Test C++ program and bundle...
        - wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip -nv
        - unzip -q -o codac_test_win.zip
        - rm -Rf codac_test_win.zip
        - cd codac_test_win
        - mv test ..
        - cd ../test
        - rm -Rf ../codac_test_win
        - cmake .
        - cmake --build .
        - ./my_project

#    - name: "Ubuntu 18.04 C++ Python 3.8"
#      os: linux
#      dist: bionic
#      compiler: gcc
#      language: python
#      python: 3.8
#      before_install: 
#        - python --version || true
#        - python3 --version || true
#        - pip --version || true
#        - pip3 --version || true
#        - sudo python --version || true
#        - sudo python3 --version || true
#        - sudo pip --version || true
#        - sudo pip3 --version || true
#        - sudo apt-get -q update || true
#        - sudo apt-get -y install flex bison libeigen3-dev || true
#        - sudo apt-get -y install doxygen graphviz || true
#        #
#        #sudo apt-get -y install python3-pip python3-setuptools python3-wheel python3-breathe sphinx-issues
#        #sudo pip3 install --upgrade pip
#        #sudo pip3 install --upgrade pyIbex
#        #
#        #sudo apt-get -y install python3.8-dev
#        #sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
#        #sudo python -m pip install --upgrade pip
#        #sudo python -m pip install --upgrade pyIbex
#        #sudo python -m pip install --upgrade setuptools wheel
#        #
#        - pip install --upgrade pip
#        - pip install --upgrade pyIbex
#        - pip install --upgrade setuptools wheel
#      cache:
#        directories: ibex
#      install:
#      script: 
#        - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -D CMAKE_INSTALL_PREFIX="../../ibex" -D CMAKE_CXX_FLAGS="-fPIC" -D CMAKE_C_FLAGS="-fPIC" .. ; cmake --build . --target install ; cd ../.. ) else echo "Using cached directory." ; fi
#        - mkdir build ; cd build
#        - cmake -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D CMAKE_BUILD_TYPE=Debug -D WITH_PYTHON=ON -D CMAKE_CXX_FLAGS="-fPIC" ..
#        - cmake --build . --target api
#        - cmake -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D CMAKE_BUILD_TYPE=Debug -D WITH_PYTHON=ON -D CMAKE_CXX_FLAGS="-fPIC" ..
#        - cmake --build . --target install
#        - cmake --build . --target pip_package
#        # Test python program and wheel...
#        - cp *.whl ../
#        #sudo pip3 install ../*.whl
#        #sudo python -m pip install ../*.whl
#        - pip install ../*.whl
#        - python -c "import sys; print(sys.version)"
#        - python ../examples/tuto/01_getting_started/01_getting_started.py
#        - cd ..
#        # Test C++ program and bundle...
#        - wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip -nv
#        - unzip -q -o codac_test_win.zip
#        - rm -Rf codac_test_win.zip
#        - cd codac_test_win
#        - mv test ..
#        - cd ../test
#        - rm -Rf ../codac_test_win
#        - cmake .
#        - cmake --build .
#        - ./my_project

    - name: "Raspbian Buster pi Docker"
      os: linux
      dist: bionic
      compiler: gcc
      services:
        - docker
      before_install: 
        - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      cache:
      install:
      script: 
         - "docker run -i -v \"${PWD}/..:${PWD}/..\" lebarsfa/pi:buster-ibex /bin/bash -c \"uname -a && cat /etc/os-release && cd ${PWD} && lsb_release -a && sudo apt-get -q update ; sudo apt-get -y install libeigen3-dev ; mkdir build ; cd build && cmake -D CMAKE_PREFIX_PATH=../ibex -D CMAKE_INSTALL_PREFIX=../../codac .. && cmake --build . --target install && cd ../.. && wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip -nv && unzip -q -o codac_test_win.zip && rm -Rf codac_test_win.zip && cd codac_test_win && mv test .. && cd ../test && rm -Rf ../codac_test_win && cmake . && cmake --build . && ./my_project \""

    - name: "Mac OS Xcode 10.1"
      os: osx
      osx_image: xcode10.1
      cache:
        directories: ibex
      install:
      script: 
        - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -D CMAKE_INSTALL_PREFIX="../../ibex" -D CMAKE_CXX_FLAGS="-fPIC -Wno-everything" -D CMAKE_C_FLAGS="-fPIC -Wno-everything" .. ; cmake --build . --target install ; cd ../.. ) else echo "Using cached directory." ; fi
        - mkdir build ; cd build
        - cmake -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" ..
        - cmake --build . --target install
        - cd ..
        # Test C++ program and bundle...
        - wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip -nv
        - unzip -q -o codac_test_win.zip
        - rm -Rf codac_test_win.zip
        - cd codac_test_win
        - mv test ..
        - cd ../test
        - rm -Rf ../codac_test_win
        - cmake .
        - cmake --build .
        - ./my_project

    - name: "Windows Visual Studio 2019 x86 C++ Python 3.9"
      # Change WITH_PYTHON=OFF when pyibex becomes available...
      env: CMAKE_PARAM_G="Visual Studio 16" CMAKE_PARAM_A=Win32 CFG=x86_vc16 CHOCO_VS_TOOLS="visualstudio2019buildtools visualstudio2019-workload-vctools" CPCFG=-win32 PY_V_F="3.9.0 --x86" PY_V_MDM=3.9 PY_V_MM=39 WITH_PYTHON=OFF WITH_CPP_BUNDLE=ON
      <<: *vs_specific

     # Uncomment when pyibex becomes available...
#    - name: "Windows Visual Studio 2019 x86 Python 3.8"
#      env: CMAKE_PARAM_G="Visual Studio 16" CMAKE_PARAM_A=Win32 CFG=x86_vc16 CHOCO_VS_TOOLS="visualstudio2019buildtools visualstudio2019-workload-vctools" CPCFG=-win32 PY_V_F="3.8.6 --x86" PY_V_MDM=3.8 PY_V_MM=38 WITH_PYTHON=ON
#      <<: *vs_specific

    - name: "Windows Visual Studio 2019 x64 C++ Python 3.9"
      env: CMAKE_PARAM_G="Visual Studio 16" CMAKE_PARAM_A=x64 CFG=x64_vc16 CHOCO_VS_TOOLS="visualstudio2019buildtools visualstudio2019-workload-vctools" CPCFG=-win_amd64 PY_V_F=3.9.0 PY_V_MDM=3.9 PY_V_MM=39 WITH_PYTHON=ON WITH_CPP_BUNDLE=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2019 x64 Python 3.8"
      env: CMAKE_PARAM_G="Visual Studio 16" CMAKE_PARAM_A=x64 CFG=x64_vc16 CHOCO_VS_TOOLS="visualstudio2019buildtools visualstudio2019-workload-vctools" CPCFG=-win_amd64 PY_V_F=3.8.6 PY_V_MDM=3.8 PY_V_MM=38 WITH_PYTHON=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2017 x86 C++"
      env: CMAKE_PARAM_G="Visual Studio 15" CMAKE_PARAM_A=Win32 CFG=x86_vc15 WITH_CPP_BUNDLE=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2017 x64 C++"
      env: CMAKE_PARAM_G="Visual Studio 15" CMAKE_PARAM_A=x64 CFG=x64_vc15 WITH_CPP_BUNDLE=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x86 C++ Python 3.7"
      # Change WITH_PYTHON=OFF when pyibex becomes available...
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=Win32 CFG=x86_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win32 PY_V_F="3.7.9 --x86" PY_V_MDM=3.7 PY_V_MM=37 WITH_PYTHON=OFF WITH_CPP_BUNDLE=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x86 Python 3.6"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=Win32 CFG=x86_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win32 PY_V_F="3.6.8 --x86" PY_V_MDM=3.6 PY_V_MM=36 WITH_PYTHON=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x86 Python 3.5"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=Win32 CFG=x86_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win32 PY_V_F="3.5.4.20200110 --x86" PY_V_MDM=3.5 PY_V_MM=35 WITH_PYTHON=ON
      <<: *vs_specific

    # Should be Visual Studio 2010 for Python 3.4...?
    - name: "Windows Visual Studio 2015 x86 Python 3.4"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=Win32 CFG=x86_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win32 PY_V_F="3.4.4.20200110 --x86" PY_V_MDM=3.4 PY_V_MM=34 WITH_PYTHON=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x64 C++ Python 3.7"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=x64 CFG=x64_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win_amd64 PY_V_F=3.7.9 PY_V_MDM=3.7 PY_V_MM=37 WITH_PYTHON=ON WITH_CPP_BUNDLE=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x64 Python 3.6"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=x64 CFG=x64_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win_amd64 PY_V_F=3.6.8 PY_V_MDM=3.6 PY_V_MM=36 WITH_PYTHON=ON
      <<: *vs_specific

    - name: "Windows Visual Studio 2015 x64 Python 3.5"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=x64 CFG=x64_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win_amd64 PY_V_F=3.5.4.20200110 PY_V_MDM=3.5 PY_V_MM=35 WITH_PYTHON=ON
      <<: *vs_specific

    # Should be Visual Studio 2010 for Python 3.4...?
    - name: "Windows Visual Studio 2015 x64 Python 3.4"
      env: CMAKE_PARAM_G="Visual Studio 14" CMAKE_PARAM_A=x64 CFG=x64_vc14 CHOCO_VS_TOOLS=vcbuildtools CPCFG=m-win_amd64 PY_V_F=3.4.4.20200110 PY_V_MDM=3.4 PY_V_MM=34 WITH_PYTHON=ON
      <<: *vs_specific

    - name: "Windows Qt 5.12.6 MinGW 7.3.0 x86"
      os: windows
      env: CMAKE_PARAM_G="MSYS Makefiles" CFG=x86_mingw7
      before_install: 
        - choco uninstall -y mingw
        # Need to free up disk space...
        - df
        - rm -Rf "/C/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools" || true
        - df
        - rm -Rf "/C/Program Files (x86)/Windows Kits" || true
        - df
        - rm -Rf "/C/Windows/SoftwareDistribution" || true
        - df
        - choco install -y winflexbison make patch
        - wget https://github.com/ros2/choco-packages/releases/download/2020-02-24/eigen.3.3.4.nupkg --no-check-certificate -nv
        - choco install -y eigen.3.3.4.nupkg
        - wget http://download.qt.io/archive/qt/5.12/5.12.6/qt-opensource-windows-x86-5.12.6.exe --no-check-certificate -nv
        - cmd //c "move /Y qt-opensource-windows-x86-5.12.6.exe %SystemDrive%\ "
        - wget http://www.ensta-bretagne.fr/lebars/Share/qt-installer-5.12.6-mingw73_32.qs --no-check-certificate -nv
        - cmd //c "move /Y qt-installer-5.12.6-mingw73_32.qs %SystemDrive%\ "
        - cmd //c netsh advfirewall set allprofiles state on
        - cmd //c netsh advfirewall firewall add rule name="Qt offline installer" dir=out action=block program="%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe" enable=yes
        # Take several min... 
        - cmd //c "%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe --script %SystemDrive%\qt-installer-5.12.6-mingw73_32.qs"
        - cmd //c netsh advfirewall firewall del rule name="Qt offline installer"
        - cmd //c netsh advfirewall set allprofiles state off
        - cmd //c "del /f /q %SystemDrive%\qt-opensource-windows-x86-5.12.6.exe"
        - df
        - export PATH=/c/Qt/Qt5.12.6/Tools/mingw730_32/bin:$PATH
      cache:
        directories: ibex
      install:
      script: 
        - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -G "${CMAKE_PARAM_G}" -D CMAKE_INSTALL_PREFIX="../../ibex" -D CMAKE_CXX_FLAGS="-fPIC" -D CMAKE_C_FLAGS="-fPIC" -D INTERVAL_LIB=filib .. ; cmake --build . --target install ; cd ../.. ) else echo "Using cached directory." ; fi
        - mkdir build ; cd build
        - cmake -G "MSYS Makefiles" -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" ..
        - cmake --build . --target install
        - cd ..
        # Test C++ program and bundle...
        - wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip --no-check-certificate -nv
        - 7z x codac_test_win.zip -y
        - rm -Rf codac_test_win.zip ; cd codac_test_win; rm -Rf ibex codac ; cp -Rf ../ibex . ; cp -Rf ../codac .; cd ..
        - 7z a -y codac_test_${CFG}.zip codac_test_win
        - cd codac_test_win/test
        - cmake -G "${CMAKE_PARAM_G}" .
        - cmake --build .
        - ./my_project.exe
        - cd ../..

    - name: "Windows MinGW 8.1.0 x64"
      os: windows
      env: CMAKE_PARAM_G="MSYS Makefiles" CFG=x64_mingw8
      before_install: 
        - choco install -y winflexbison make patch
        - wget https://github.com/ros2/choco-packages/releases/download/2020-02-24/eigen.3.3.4.nupkg --no-check-certificate -nv
        - choco install -y eigen.3.3.4.nupkg
      cache:
        directories: ibex
      install:
      script: 
        - if [ ! -e "ibex/include/ibex.h" ]; then ( git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -G "${CMAKE_PARAM_G}" -D CMAKE_INSTALL_PREFIX="../../ibex" -D CMAKE_CXX_FLAGS="-fPIC" -D CMAKE_C_FLAGS="-fPIC" -D INTERVAL_LIB=filib .. ; cmake --build . --target install ; cd ../.. ) else echo "Using cached directory." ; fi
        - mkdir build ; cd build
        - cmake -G "MSYS Makefiles" -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" ..
        - cmake --build . --target install
        - cd ..
        # Test C++ program and bundle...
        - wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip --no-check-certificate -nv
        - 7z x codac_test_win.zip -y
        - rm -Rf codac_test_win.zip ; cd codac_test_win; rm -Rf ibex codac ; cp -Rf ../ibex . ; cp -Rf ../codac .; cd ..
        - 7z a -y codac_test_${CFG}.zip codac_test_win
        - cd codac_test_win/test
        - cmake -G "${CMAKE_PARAM_G}" .
        - cmake --build .
        - ./my_project.exe
        - cd ../..

# Configuration for C++ tests:

before_install:
  - eval "${MATRIX_EVAL}"

cache:
  directories:
    - $HOME/capd
    - $HOME/ibex-lib

install:
  
  # For documentation
  - sudo add-apt-repository ppa:deadsnakes/ppa -y && sudo apt-get update # for using recent Python versions
  - sudo apt-get -y install python3.6 python3-setuptools python3-pip
  - sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1 # using python3 as default version
  - sudo python3 -m pip install sphinx_rtd_theme breathe sphinx-issues sphinx-tabs
  - sudo apt-get -y install python3-sphinx doxygen graphviz
  - sudo apt-get -y install libeigen3-dev

  # For Python wrapping
  #- sudo python3 -m pip install wheel
  #- sudo python3 -m pip install --upgrade pip
  #- sudo python3 -m pip install pyibex
  #- sudo python3 -m pip install --upgrade pyibex==1.8.0

  - pwd
  - ls
  - export ORIGIN_DIR=$PWD
  - cd ..
  - pwd
  - ls
  - cd $ORIGIN_DIR

  # IBEX
  - bash scripts/dependencies/install_ibex.sh

  # CAPD
  - bash scripts/dependencies/install_capd.sh

  # Environment variables
  - export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/codac/build_install
  - export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/ibex-lib/build_install
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

script:

  #- py_version=$(python -c "import sys; print(sys.version[:3])") # default python version
  #- echo "$py_version"
  
  - cd $ORIGIN_DIR
  - pwd
  - ls
  #- git submodule init ; git submodule update # for pybind11 submodule
  - mkdir build -p
  - cd build
  
  # Without synthesis tree

  # Building lib + tests
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/codac/build_install
          -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install
          -DWITH_PYTHON=OFF
          -DBUILD_TESTS=ON
          -DWITH_TUBE_TREE=OFF
          -DWITH_CAPD=ON
          -DTEST_EXAMPLES=ON ..
  - make api
  # Again for doxygen2docstring
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/codac/build_install
          -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install
          -DWITH_PYTHON=OFF
          -DBUILD_TESTS=ON
          -DWITH_TUBE_TREE=OFF
          -DWITH_CAPD=ON
          -DTEST_EXAMPLES=ON ..
  ##-DPYTHON_EXECUTABLE=/usr/bin/python3.5 ..
  - make
  #- make doc # todo
  - make install
  #- cd python/python_package
  #- /usr/bin/python3.5 setup.py develop --user
  #- /usr/bin/python3.5 pycodac/tests/test_arithmetic.py 
  #- cd ../../

  # Building the examples
  - cd ../examples
  - find . -type d -name build -prune -exec rm -rf {} \;
  - cd linobs
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd basics
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd robotics
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd tuto
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd lie_group
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../../build

  # Testing
  - make test
  - ./../examples/tuto/05_dyn_rangebearing/build/05_dyn_rangebearing
    
  # With synthesis tree for all created tubes
  
  # Building lib + tests
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/codac/build_install
          -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install
          -DWITH_PYTHON=OFF
          -DBUILD_TESTS=ON
          -DWITH_TUBE_TREE=ON
          -DWITH_CAPD=ON
          -DTEST_EXAMPLES=ON ..
  - make api
  # Again for doxygen2docstring
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/codac/build_install
          -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install
          -DWITH_PYTHON=OFF
          -DBUILD_TESTS=ON
          -DWITH_TUBE_TREE=ON
          -DWITH_CAPD=ON
          -DTEST_EXAMPLES=ON ..
  ##-DPYTHON_EXECUTABLE=/usr/bin/python3.5 ..
  - make
  #- make doc
  - make install
  #- cd python/python_package
  #- /usr/bin/python3.5 setup.py develop --user
  #- /usr/bin/python3.5 pycodac/tests/test_arithmetic.py 
  #- cd ../../

  # Building the examples
  - cd ../examples
  - find . -type d -name build -prune -exec rm -rf {} \;
  - cd linobs
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd basics
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd robotics
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd tuto
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ..
  - cd lie_group
  - find . * -maxdepth 0 | grep -P "^[0-9]" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../../build

  # Testing
  - make test
  - ./../examples/tuto/05_dyn_rangebearing/build/05_dyn_rangebearing

deploy:
  - provider: releases
    api_key:
      secure: ILyVRxUJHYAYHY6aGeY0QSVpwRF/Nm5piue7jkOArZXvwwjavPT8Gm/ZpXeor5rOQV/7rY4ACoOgMyhcFFKrL7BnKmzJUPPGyLez6aZz5ZT0I7YsQIG9CPPko0nIihSOircAjii8XaYwTntFAL9AqCgQk2PQ9HajzhbQrur4RPXFIwhJd9DDSCf8gO1WRyqRkL3gZSaq3GjQP++ZGFR9S5YlpCWVaG88Vq+ygrR9894tQ2on8FnOeE4bS768I36yT/w8IzES2o3oDh1bVECI2oEkwb2IYL5J5si1b0Wo6ZQdKNLu/50mohHbtKYzGfWiliRMXikXVwSXA/Y5G8ou1SCNLb7fM1s2E8KpjeOBHJJzC6syYaQzRZ611Srt3DpdlFa+s4aivgaKQ+AK+gromXwinE61FLEpUMglu7+3jFs6sMNNeYLgpGLjpnquyClljHmms79gm3T7dCm8C5ZFsyCDJq3ETEGDfIxN256dqLE6nu/oWuU6koQ3aMlVytMKG/veMb+jJY/J+f7upkUIBDtw0RKxk08gKX84wnl2brcHOOWAkSxcRINe/KUVDoR/7B3LAiarOyglazdEfRAmTE2o+te82/T0Wv0LoBn5/zXHZvtlpJYDuXndJ8HB8NWQl7sLOiqh4KbYkoyjPt9bn5XHvbQM/E7LLYIzpiOWPT4=
    on:
      repo: lebarsfa/codac
      all_branches: true
    skip_cleanup: true
    overwrite: true
    draft: true
    prerelease: true
    file_glob: true
    file: 
      - "*.zip"
      - "*.whl"
      - "wheelhouse/*.whl"
  - provider: releases
    api_key:
      secure: Y+ZO/wvqZp29/cSnAqJKOAybSGlu8ALDsPS63zQXPtUSiUejfnoDLi77ANlHxUF7MhXlo38VanwYR/jGnXeCUPtX1Seg8W2v1mXFNaUKCki/bkEeLtK2uXAD5flxoBULPYcdspNbGlyzohxOZgr7VFNk0TkIg7jSlUkGuSAlJy81qh6ctVFtKhTsLDwi8ZKenwFFmlBNzw3dXR5c9AloBSCLRfWlwq2INYeEfgkItBMIe+7jh7RaacXoNrV/JkUQNcp4W5wA/zgMkOXqXSf7LPRIXd80zCgCmZ+ODqKTVHx5gXZxUPvW3cAtsm7RU4VNwpXiC2ckNRpLcCF8/dav3XG2hZrddUzvEXbrePnONrNQHrdszVokkQoJBYPFsZuUR4lDqV25aGVEvsn5tnBfIH6Rf2abF+pUkuKnWFqCO71kfwPBY5wKHi2SdaKVcZm06jD1tp87OuOt4T0DPBs4/SyQ7925eXk4Ol0MwCsGj1Pml+R90khq74xFe48KOxXLIYxHOqBO600HL3dYVrpQTZ/3rDpiTKlyGn8he+K7gCHFlJ85uBgp89cQei8aUOACLKhecT/rZqPIoZNsDe28AtDrj5LeLYeGSQDlukjukYfKcZF10itcSF8UusgNfexuLUPz5BUf2xrNF0cCFOAzP0auhgxRLC9VPGdEzvY0N1c=
    on:
      repo: codac-team/codac
      all_branches: true
    skip_cleanup: true
    overwrite: true
    draft: true
    prerelease: true
    file_glob: true
    file: 
      - "*.zip"
      - "*.whl"
      - "wheelhouse/*.whl"
